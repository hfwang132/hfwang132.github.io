<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title>Python - Tag - Haifei&#39;s Home</title>
        <link>http://example.com/tags/python/</link>
        <description>Python - Tag - Haifei&#39;s Home</description>
        <generator>Hugo -- gohugo.io</generator><language>en</language><managingEditor>hfwang132@gmail.com (hfwang132)</managingEditor>
            <webMaster>hfwang132@gmail.com (hfwang132)</webMaster><copyright>This work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.</copyright><lastBuildDate>Sat, 01 Jul 2023 17:48:54 &#43;0800</lastBuildDate><atom:link href="http://example.com/tags/python/" rel="self" type="application/rss+xml" /><item>
    <title>Polling Jupyter Widget UI Events in Runtime</title>
    <link>http://example.com/ui_poll/</link>
    <pubDate>Sat, 01 Jul 2023 17:48:54 &#43;0800</pubDate>
    <author>hfwang132</author>
    <guid>http://example.com/ui_poll/</guid>
    <description><![CDATA[Let&rsquo;s look at a code snippet in the Jupyter Notebook:
1 2 3 4 5 6 7 8 9 10 import time import ipywidgets as widgets from IPython.display import display slider = widgets.IntSlider() display(slider) while True: print(slider.value) time.sleep(1) IntSlider is an interactive Jupyter Notebook widget. When the user interacts with the slider, the slider value should change.
However, if you run the above codes, you will find that the printed value of the slider won&rsquo;t change at all &ndash; it will be stuck at its initial value.]]></description>
</item>
<item>
    <title>Python coroutines and asyncio</title>
    <link>http://example.com/python_asyncio/</link>
    <pubDate>Tue, 13 Jun 2023 22:05:41 &#43;0800</pubDate>
    <author>hfwang132</author>
    <guid>http://example.com/python_asyncio/</guid>
    <description><![CDATA[Recently, I have been using Python coroutines/asynchronous programming in a project. Now, I will summarize my experience.
Import 1 import asyncio If asyncio is to be used in an IPython environment, we have to add two more linesï¼š
1 2 3 import nest_asyncio nest_asyncio.apply() import asyncio Coroutines Coroutines are the core of asynchronous programming in Python. To define a coroutine, you need to use async def.
1 2 3 async def main(): # do something print(&#34;Hello world!]]></description>
</item>
</channel>
</rss>
