<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title>CS - Category - Haifei&#39;s Home</title>
        <link>http://example.com/en/categories/cs/</link>
        <description>CS - Category - Haifei&#39;s Home</description>
        <generator>Hugo -- gohugo.io</generator><language>en</language><copyright>This work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.</copyright><lastBuildDate>Sat, 01 Jul 2023 17:48:54 &#43;0800</lastBuildDate><atom:link href="http://example.com/en/categories/cs/" rel="self" type="application/rss+xml" /><item>
    <title>Polling Jupyter widget UI events in runtime</title>
    <link>http://example.com/en/ui_poll/</link>
    <pubDate>Sat, 01 Jul 2023 17:48:54 &#43;0800</pubDate>
    <author>Author</author>
    <guid>http://example.com/en/ui_poll/</guid>
    <description><![CDATA[<p>Let&rsquo;s look at a code snippet in the Jupyter Notebook:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">time</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">ipywidgets</span> <span class="k">as</span> <span class="nn">widgets</span>
</span></span><span class="line"><span class="cl"><span class="kn">from</span> <span class="nn">IPython.display</span> <span class="kn">import</span> <span class="n">display</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">slider</span> <span class="o">=</span> <span class="n">widgets</span><span class="o">.</span><span class="n">IntSlider</span><span class="p">()</span>
</span></span><span class="line"><span class="cl"><span class="n">display</span><span class="p">(</span><span class="n">slider</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">while</span> <span class="kc">True</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">    <span class="nb">print</span><span class="p">(</span><span class="n">slider</span><span class="o">.</span><span class="n">value</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">time</span><span class="o">.</span><span class="n">sleep</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p><code>IntSlider</code> is an interactive Jupyter Notebook widget. When the user interacts with the slider, the slider value should change.</p>
<p>However, if you run the above codes, you will find that the printed value of the slider won&rsquo;t change at all &ndash; it will be stuck at its initial value.</p>]]></description>
</item>
<item>
    <title>Python coroutines and asyncio</title>
    <link>http://example.com/en/python_asyncio/</link>
    <pubDate>Tue, 13 Jun 2023 22:05:41 &#43;0800</pubDate>
    <author>Author</author>
    <guid>http://example.com/en/python_asyncio/</guid>
    <description><![CDATA[<p>Recently, I have been using Python coroutines/asynchronous programming in a project. Now, I will summarize my experience.</p>
<h2 id="import">Import</h2>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">asyncio</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>If <code>asyncio</code> is to be used in an IPython environment, we have to add two more linesï¼š</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">nest_asyncio</span>
</span></span><span class="line"><span class="cl"><span class="n">nest_asyncio</span><span class="o">.</span><span class="n">apply</span><span class="p">()</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">asyncio</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h2 id="coroutines">Coroutines</h2>
<p>Coroutines are the core of asynchronous programming in Python. To define a coroutine, you need to use <code>async def</code>.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="k">async</span> <span class="k">def</span> <span class="nf">main</span><span class="p">():</span>
</span></span><span class="line"><span class="cl">    <span class="c1"># do something</span>
</span></span><span class="line"><span class="cl">    <span class="nb">print</span><span class="p">(</span><span class="s2">&#34;Hello world!&#34;</span><span class="p">)</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>To execute the coroutine, you cannot directly call <code>main()</code>. Instead, you need to use <code>run()</code>:</p>]]></description>
</item>
<item>
    <title>Increasing the swapfile for Linux</title>
    <link>http://example.com/en/increase_swapfile/</link>
    <pubDate>Mon, 12 Jun 2023 22:59:26 &#43;0800</pubDate>
    <author>Author</author>
    <guid>http://example.com/en/increase_swapfile/</guid>
    <description><![CDATA[<p>Xilinx&rsquo;s toolchain consumes soooo much memory! Sometimes it causes the system to freeze&hellip; After all, my laptop only has 8GB of RAM. So there&rsquo;s no other choice but to add virtual memories.</p>
<p>After increase the swapfile, the system performance has improved a lot:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">sudo swapoff /swapfile
</span></span><span class="line"><span class="cl">sudo dd <span class="k">if</span><span class="o">=</span>/dev/zero <span class="nv">of</span><span class="o">=</span>/swapfile <span class="nv">bs</span><span class="o">=</span>1M <span class="nv">count</span><span class="o">=</span><span class="m">16384</span>
</span></span><span class="line"><span class="cl">sudo mkswap /swapfile
</span></span><span class="line"><span class="cl">sudo swapon /swapfile
</span></span></code></pre></td></tr></table>
</div>
</div>]]></description>
</item>
<item>
    <title>Mounting the EFI partition in Windows OS</title>
    <link>http://example.com/en/efi_partition/</link>
    <pubDate>Mon, 12 Jun 2023 22:26:16 &#43;0800</pubDate>
    <author>Author</author>
    <guid>http://example.com/en/efi_partition/</guid>
    <description><![CDATA[<p>To mount the EFI partitions, run the following commands in PowerShell:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-powershell" data-lang="powershell"><span class="line"><span class="cl"><span class="n">diskpart</span>
</span></span><span class="line"><span class="cl"><span class="n">list</span> <span class="n">disk</span>  <span class="c"># make sure which is the disk that contains the EFI partition. usually 0</span>
</span></span><span class="line"><span class="cl"><span class="nb">select </span><span class="n">disk</span> <span class="mf">0</span>
</span></span><span class="line"><span class="cl"><span class="n">list</span> <span class="n">partition</span> <span class="c"># make sure which is the EFI partition. normally 0</span>
</span></span><span class="line"><span class="cl"><span class="nb">select </span><span class="n">disk</span> <span class="mf">0</span>
</span></span><span class="line"><span class="cl"><span class="n">assign</span> <span class="n">letter</span><span class="p">=</span><span class="n">z</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>Then we will mount the EFI partition as drive Z.</p>
<p>This operation may be useful when using a dual-boot system with Windows and Ubuntu: Sometimes, after removing the Ubuntu system, only the Windows system remains, but the GRUB interface still appears every time the computer boots. In this case, you need to delete the old Ubuntu EFI partition.</p>]]></description>
</item>
</channel>
</rss>
